// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

/*
Package api is a generated protocol buffer package.

It is generated from these files:
	api/api.proto

It has these top-level messages:
	Service
	Project
	Response
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Service struct {
	Name string            `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Tags map[string]string `protobuf:"bytes,2,rep,name=Tags" json:"Tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	File []byte            `protobuf:"bytes,3,opt,name=File,proto3" json:"File,omitempty"`
	Mode string            `protobuf:"bytes,4,opt,name=Mode" json:"Mode,omitempty"`
}

func (m *Service) Reset()                    { *m = Service{} }
func (m *Service) String() string            { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()               {}
func (*Service) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Service) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Service) GetTags() map[string]string {
	if m != nil {
		return m.Tags
	}
	return nil
}

func (m *Service) GetFile() []byte {
	if m != nil {
		return m.File
	}
	return nil
}

func (m *Service) GetMode() string {
	if m != nil {
		return m.Mode
	}
	return ""
}

type Project struct {
	Name     string              `protobuf:"bytes,1,opt,name=Name" json:"Name,omitempty"`
	Version  string              `protobuf:"bytes,2,opt,name=Version" json:"Version,omitempty"`
	Services map[string]*Service `protobuf:"bytes,3,rep,name=services" json:"services,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *Project) Reset()                    { *m = Project{} }
func (m *Project) String() string            { return proto.CompactTextString(m) }
func (*Project) ProtoMessage()               {}
func (*Project) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Project) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Project) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Project) GetServices() map[string]*Service {
	if m != nil {
		return m.Services
	}
	return nil
}

type Response struct {
	Code    int32  `protobuf:"varint,1,opt,name=code" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message" json:"message,omitempty"`
}

func (m *Response) Reset()                    { *m = Response{} }
func (m *Response) String() string            { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()               {}
func (*Response) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Response) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Response) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterType((*Service)(nil), "virhal.Service")
	proto.RegisterType((*Project)(nil), "virhal.Project")
	proto.RegisterType((*Response)(nil), "virhal.Response")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for ProjectService service

type ProjectServiceClient interface {
	Start(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error)
	Status(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error)
	Stop(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error)
}

type projectServiceClient struct {
	cc *grpc.ClientConn
}

func NewProjectServiceClient(cc *grpc.ClientConn) ProjectServiceClient {
	return &projectServiceClient{cc}
}

func (c *projectServiceClient) Start(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/virhal.ProjectService/Start", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Status(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/virhal.ProjectService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectServiceClient) Stop(ctx context.Context, in *Project, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := grpc.Invoke(ctx, "/virhal.ProjectService/Stop", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ProjectService service

type ProjectServiceServer interface {
	Start(context.Context, *Project) (*Response, error)
	Status(context.Context, *Project) (*Response, error)
	Stop(context.Context, *Project) (*Response, error)
}

func RegisterProjectServiceServer(s *grpc.Server, srv ProjectServiceServer) {
	s.RegisterService(&_ProjectService_serviceDesc, srv)
}

func _ProjectService_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virhal.ProjectService/Start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Start(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virhal.ProjectService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Status(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProjectService_Stop_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Project)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServiceServer).Stop(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/virhal.ProjectService/Stop",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServiceServer).Stop(ctx, req.(*Project))
	}
	return interceptor(ctx, in, info, handler)
}

var _ProjectService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "virhal.ProjectService",
	HandlerType: (*ProjectServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Start",
			Handler:    _ProjectService_Start_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _ProjectService_Status_Handler,
		},
		{
			MethodName: "Stop",
			Handler:    _ProjectService_Stop_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}

func init() { proto.RegisterFile("api/api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 394 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0xdb, 0x8a, 0xd3, 0x40,
	0x18, 0xc7, 0x99, 0x1c, 0x7a, 0xf8, 0x6a, 0x6d, 0x19, 0x8a, 0xc4, 0xa0, 0x50, 0x02, 0x42, 0x29,
	0x98, 0x60, 0xbd, 0xb0, 0xf6, 0xb2, 0x50, 0xbd, 0x51, 0x91, 0x44, 0xbc, 0xf0, 0x6e, 0xac, 0x43,
	0x1c, 0x4d, 0x33, 0x21, 0x33, 0x0d, 0x94, 0x65, 0x6f, 0xf6, 0x15, 0xf6, 0x39, 0xf6, 0x1d, 0xf6,
	0x1d, 0xf6, 0x15, 0xfa, 0x20, 0xcb, 0x4c, 0x32, 0xa5, 0x5b, 0x7a, 0xb1, 0x7b, 0xf7, 0x1d, 0x7f,
	0xf3, 0xff, 0x7f, 0x09, 0xf4, 0x49, 0xc1, 0x22, 0x52, 0xb0, 0xb0, 0x28, 0xb9, 0xe4, 0xb8, 0x55,
	0xb1, 0xf2, 0x2f, 0xc9, 0xfc, 0x57, 0x29, 0xe7, 0x69, 0x46, 0x23, 0xdd, 0xcd, 0x73, 0x2e, 0x89,
	0x64, 0x3c, 0x17, 0xf5, 0x54, 0x70, 0x83, 0xa0, 0x9d, 0xd0, 0xb2, 0x62, 0x6b, 0x8a, 0x31, 0x38,
	0xdf, 0xc8, 0x86, 0x7a, 0x68, 0x8c, 0x26, 0xdd, 0x58, 0xc7, 0xf8, 0x2d, 0x38, 0x3f, 0x48, 0x2a,
	0x3c, 0x6b, 0x6c, 0x4f, 0x7a, 0xb3, 0x97, 0x61, 0x0d, 0x0d, 0x9b, 0x95, 0x50, 0xf5, 0x56, 0xb9,
	0x2c, 0x77, 0xb1, 0x1e, 0x53, 0x88, 0x4f, 0x2c, 0xa3, 0x9e, 0x3d, 0x46, 0x93, 0x67, 0xb1, 0x8e,
	0x55, 0xed, 0x2b, 0xff, 0x43, 0x3d, 0xa7, 0xc6, 0xaa, 0xd8, 0xff, 0x00, 0xdd, 0xc3, 0x2a, 0x1e,
	0x82, 0xfd, 0x9f, 0xee, 0x9a, 0x67, 0x55, 0x88, 0x47, 0xe0, 0x56, 0x24, 0xdb, 0x52, 0xcf, 0xd2,
	0xb5, 0x3a, 0x59, 0x58, 0x73, 0x14, 0xdc, 0x22, 0x68, 0x7f, 0x2f, 0xf9, 0x3f, 0xba, 0x96, 0x67,
	0xf5, 0x7a, 0xd0, 0xfe, 0x49, 0x4b, 0xc1, 0x78, 0xde, 0xec, 0x9a, 0x14, 0x7f, 0x84, 0x8e, 0xa8,
	0x55, 0x0b, 0xcf, 0xd6, 0x6e, 0x5e, 0x1b, 0x37, 0x0d, 0xd0, 0xb8, 0x6a, 0x1c, 0x1d, 0xc6, 0xfd,
	0x2f, 0xd0, 0x7f, 0xd0, 0x3a, 0xa3, 0xf8, 0xcd, 0xb1, 0xe2, 0xde, 0x6c, 0x70, 0x72, 0xa8, 0x63,
	0x0b, 0x73, 0xe8, 0xc4, 0x54, 0x14, 0x3c, 0x17, 0xfa, 0x36, 0x6b, 0x75, 0x1b, 0x45, 0x72, 0x63,
	0x1d, 0x2b, 0x0b, 0x1b, 0x2a, 0x04, 0x49, 0x8d, 0x7d, 0x93, 0xce, 0xf6, 0x08, 0x9e, 0x37, 0x5a,
	0xcd, 0x37, 0x5b, 0x82, 0x9b, 0x48, 0x52, 0x4a, 0x3c, 0x38, 0x31, 0xe3, 0x0f, 0x4d, 0xc1, 0x3c,
	0x16, 0xbc, 0xb8, 0xba, 0xdb, 0x5f, 0x5b, 0xc3, 0xa0, 0x17, 0x55, 0xef, 0xa2, 0xa2, 0x1e, 0x5b,
	0xa0, 0x29, 0xfe, 0x0c, 0xad, 0x44, 0x12, 0xb9, 0x15, 0x8f, 0x81, 0xf8, 0x1a, 0x32, 0xc2, 0xf8,
	0x08, 0x12, 0x5d, 0xa8, 0xdb, 0x5f, 0xe2, 0x15, 0x38, 0x89, 0xe4, 0xc5, 0x13, 0x30, 0xd3, 0x33,
	0x98, 0xa5, 0xfb, 0xcb, 0x26, 0x05, 0xfb, 0xdd, 0xd2, 0x7f, 0xe8, 0xfb, 0xfb, 0x00, 0x00, 0x00,
	0xff, 0xff, 0x5c, 0x0c, 0x85, 0x76, 0xd8, 0x02, 0x00, 0x00,
}
